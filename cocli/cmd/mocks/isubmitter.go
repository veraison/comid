// Code generated by MockGen. DO NOT EDIT.
// Source: cocli/cmd/isubmitter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/veraison/apiclient/common"
)

// MockISubmitter is a mock of ISubmitter interface.
type MockISubmitter struct {
	ctrl     *gomock.Controller
	recorder *MockISubmitterMockRecorder
}

// MockISubmitterMockRecorder is the mock recorder for MockISubmitter.
type MockISubmitterMockRecorder struct {
	mock *MockISubmitter
}

// NewMockISubmitter creates a new mock instance.
func NewMockISubmitter(ctrl *gomock.Controller) *MockISubmitter {
	mock := &MockISubmitter{ctrl: ctrl}
	mock.recorder = &MockISubmitterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISubmitter) EXPECT() *MockISubmitterMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockISubmitter) Run(arg0 []byte, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockISubmitterMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockISubmitter)(nil).Run), arg0, arg1)
}

// SetClient mocks base method.
func (m *MockISubmitter) SetClient(client *common.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClient", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetClient indicates an expected call of SetClient.
func (mr *MockISubmitterMockRecorder) SetClient(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClient", reflect.TypeOf((*MockISubmitter)(nil).SetClient), client)
}

// SetDeleteSession mocks base method.
func (m *MockISubmitter) SetDeleteSession(session bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeleteSession", session)
}

// SetDeleteSession indicates an expected call of SetDeleteSession.
func (mr *MockISubmitterMockRecorder) SetDeleteSession(session interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeleteSession", reflect.TypeOf((*MockISubmitter)(nil).SetDeleteSession), session)
}

// SetSubmitURI mocks base method.
func (m *MockISubmitter) SetSubmitURI(uri string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSubmitURI", uri)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSubmitURI indicates an expected call of SetSubmitURI.
func (mr *MockISubmitterMockRecorder) SetSubmitURI(uri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubmitURI", reflect.TypeOf((*MockISubmitter)(nil).SetSubmitURI), uri)
}
